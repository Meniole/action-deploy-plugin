name: "Update Manifest and Commit Changes"
description: "Checks out the repository, sets up Node, installs dependencies, updates manifest.json, formats, and commits/pushes changes signing the commit."
inputs:
  manifestPath:
    description: "The path to the manifest.json file."
    required: false
    default: "${{ github.workspace }}/manifest.json"
  schemaPath:
    description: "The path to the plugin settings schema."
    required: false
    default: "${{ github.workspace }}/src/types/plugin-input.js"
  pluginEntry:
    description: "The path to the plugin entry file."
    required: false
    default: "${{ github.workspace }}/src/index.ts"
  commitMessage:
    description: "The commit message."
    required: false
    default: "chore: updated manifest.json and dist build"
  nodeVersion:
    description: "The version of Node.js to use."
    default: "20.10.0"
outputs: {}
runs:
  using: "composite"
  steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.nodeVersion }}

    - name: Install dependencies
      shell: bash
      run: |
        yarn install --immutable --immutable-cache --check-cache

    - name: Compile TypeScript files
      shell: bash
      run: |
        yarn tsc --project tsconfig.json -m commonjs

    - name: Build project
      shell: bash
      run: |
        yarn add -DE @vercel/ncc
        echo "Compiling plugin..."
        yarn ncc build --minify ${{ inputs.pluginEntry }} -m -o dist
        echo "Compiling plugin types..."
        yarn ncc build ${{ inputs.schemaPath }} -m -o plugin

    - name: Update manifest configuration JSON
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs').promises;
          const path = require('path');
          
          async function updateManifest() {
            const manifestPath = '${{ inputs.manifestPath }}';
            const pluginPath = path.resolve('${{ github.workspace }}', 'plugin', 'index.js');
          
            let pluginSettingsSchema;
            try {
              // Use dynamic import with file protocol
              const module = await import(`file://${pluginPath}`);
              pluginSettingsSchema = module.pluginSettingsSchema;
            } catch (error) {
              console.error('Error importing module:', error);
              process.exit(1);
            }
          
            const manifest = JSON.parse(await fs.readFile(manifestPath, 'utf8'));
            manifest["configuration"] = pluginSettingsSchema;
          
            function customReviver(key, value) {
              if (typeof value === "object" && value !== null) {
                if ("properties" in value && "required" in value) {
                  const requiredFields = new Set(value.required);
                  for (const [propKey, propValue] of Object.entries(value.properties)) {
                    if (typeof propValue === 'object' && 'default' in propValue) {
                      requiredFields.delete(propKey);
                    }
                  }
                  value.required = Array.from(requiredFields);
                  if (value.required.length === 0) {
                    delete value.required;
                  }
                }
                
                // Recursively apply to nested objects and arrays
                if (Array.isArray(value)) {
                  return value.map(item => JSON.parse(JSON.stringify(item), customReviver));
                } else {
                  return Object.fromEntries(
                    Object.entries(value).map(([k, v]) => [k, JSON.parse(JSON.stringify(v), customReviver)])
                  );
                }
              }
              return value;
            }
          
            const updatedManifest = JSON.stringify(manifest, customReviver, 2);
            console.log('Updated manifest:', updatedManifest);
            await fs.writeFile(manifestPath, updatedManifest);
          }
          
          updateManifest().catch(error => {
            console.error('Error updating manifest:', error);
            process.exit(1);
          });

    - name: Format manifest using Prettier
      shell: bash
      run: |
        yarn add -DE prettier
        yarn prettier --write .

    - name: Get GitHub App token
      if: env.APP_ID != '' && env.APP_PRIVATE_KEY != ''
      uses: tibdex/github-app-token@v1.7.0
      id: get_installation_token
      with:
        app_id: ${{ env.APP_ID }}
        private_key: ${{ env.APP_PRIVATE_KEY }}

    - name: Commit and Push changes
      shell: bash
      env:
        GITHUB_TOKEN: ${{ steps.get_installation_token.outputs.token || github.token }}
      run: |
        app_token="${{ steps.get_installation_token.outputs.token }}" # Assuming this outputs your app token
        
        user_info=$(curl -s -H "Authorization: token $app_token" https://api.github.com/user)
        
        user_name=$(echo "$user_info" | jq -r .name)
        user_email=$(echo "$user_info" | jq -r .email)
        
        if [ "$user_email" == "null" ]; then
          user_email="ubiquity-os[bot]@users.noreply.github.com"
          user_name="ubiquity-os[bot]"
        fi
        
        # Configure Git with the retrieved user information
        git config --global user.name "$user_name"
        git config --global user.email "$user_email"
        git remote set-url origin https://${{ env.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
        
        git add "${{ inputs.manifestPath }}"
        git add -f ${{ github.workspace }}/dist/\*
        if [ -n "$(git diff-index --cached --name-only HEAD)" ]; then
          git commit -m "${{ inputs.commitMessage }}" || echo "Commit failed"
          # Attempt to pull and resolve conflicts
          git pull origin ${{ github.ref_name }} || {
            echo "Rebase failed, force pushing changes."
            git push --force origin HEAD:${{ github.ref_name }}
            exit 0
          }
          git push origin HEAD:${{ github.ref_name }}
        else
          echo "No changes to commit"
        fi