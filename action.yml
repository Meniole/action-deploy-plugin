name: "Update Manifest and Commit Changes"
description: "Checks out the repository, sets up Node, installs dependencies, updates manifest.json, formats, and commits/pushes changes signing the commit."
inputs:
  manifest-path:
    description: "The path to the manifest.json file."
    required: false
    default: "${{ github.workspace }}/manifest.json"
  schema-path:
    description: "The path to the plugin settings schema."
    required: false
    default: "${{ github.workspace }}/src/types/plugin-input.js"
  plugin-entry:
    description: "The path to the plugin entry file."
    required: false
    default: "${{ github.workspace }}/src/index.ts"
  commit-message:
    description: "The commit message."
    required: false
    default: "chore: updated manifest.json and dist build"
  node-version:
    description: "The version of Node.js to use."
    default: "20.10.0"
outputs: {}
runs:
  using: "composite"
  steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}

    - name: Install dependencies
      shell: bash
      run: |
        yarn install --immutable --immutable-cache --check-cache

    - name: Compile TypeScript files
      shell: bash
      run: |
        yarn tsc --project tsconfig.json -m commonjs

    - name: Build project
      shell: bash
      run: |
        yarn add -DE @vercel/ncc
        yarn ncc build ${{ inputs.plugin-entry }} -m

    - name: Update manifest configuration JSON
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const path = require('path');

          const { pluginSettingsSchema } = require('${{ inputs.schema-path }}');

          const manifestPath = '${{ inputs.manifest-path }}'
          const manifest = JSON.parse(fs.readFileSync(manifestPath, 'utf8'));

          const configuration = JSON.stringify(pluginSettingsSchema);

          manifest["configuration"] = JSON.parse(configuration);

          const updatedManifest = JSON.stringify(manifest, null, 2)
          console.log('Updated manifest:', updatedManifest);
          fs.writeFileSync(manifestPath, updatedManifest);

    - name: Format manifest using Prettier
      shell: bash
      run: |
        yarn add -DE prettier
        yarn prettier --write .

    - name: Add GitHub packages
      shell: bash
      run: |
        yarn add @octokit/auth-app @octokit/core

    - name: Get GitHub App token
      if: inputs.app-id != '' && inputs.app-private-key != ''
      uses: tibdex/github-app-token@v1.7.0
      id: get_installation_token
      with:
        app_id: ${{ inputs.app-id }}
        private_key: ${{ inputs.app-private-key }}

    - name: Commit and Push changes
      uses: actions/github-script@v7
      env:
        github-token: ${{ steps.get_installation_token.outputs.token || github.token }}
      with:
        script: |
          const fs = require('fs');
          
          const owner = process.env.GITHUB_REPOSITORY_OWNER;
          const repo = process.env.GITHUB_REPOSITORY.split('/')[1];
          const manifestPath = '${{ inputs.manifest-path }}';
          const commitMessage = '${{ inputs.commit-message }}';
          const branch = process.env.GITHUB_REF_NAME;
          
          const manifestContent = fs.readFileSync(manifestPath, 'utf8');
          
          const { data: { default_branch } } = await github.rest.repos.get({
            owner,
            repo
          });
          
          const branchToUse = branch || default_branch;
  
          const { data: { object: { sha: latestSha } } } = await github.rest.git.getRef({
                          owner,
                          repo,
                          ref: `heads/${branchToUse}`
          });
  
          const { data: { sha: newTreeSha } } = await github.rest.git.createTree({
                          owner,
                          repo,
                          tree: [{
                            path: manifestPath,
                            mode: '100644',
                            type: 'blob',
                            content: manifestContent
                          }],
                          base_tree: latestSha
          });
  
          const { data: { sha: newCommitSha } } = await github.rest.git.createCommit({
                          owner,
                          repo,
                          message: commitMessage,
                          tree: newTreeSha,
                          parents: [latestSha]
          });
  
          await github.rest.git.updateRef({
            owner,
            repo,
            ref: `heads/${branchToUse}`,
            sha: newCommitSha
          });
  
          console.log(`Changes committed and pushed to ${branchToUse}`);
