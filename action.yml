name: "Update Manifest and Commit Changes"
description: "Checks out the repository, sets up Node, installs dependencies, updates manifest.json, formats, and commits/pushes changes signing the commit."
inputs:
  manifestPath:
    description: "The path to the manifest.json file."
    required: false
    default: "${{ github.workspace }}/manifest.json"
  schemaPath:
    description: "The path to the plugin settings schema."
    required: false
    default: "${{ github.workspace }}/src/types/plugin-input.ts"
  pluginEntry:
    description: "The path to the plugin entry file."
    required: false
    default: "${{ github.workspace }}/src/index.ts"
  commitMessage:
    description: "The commit message."
    required: false
    default: "chore: updated manifest.json and dist build"
  nodeVersion:
    description: "The version of Node.js to use."
    default: "20.10.0"
outputs: {}
runs:
  using: "composite"
  steps:
    - name: Check out the repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.nodeVersion }}

    - name: Install dependencies
      shell: bash
      run: |
        yarn install --immutable --immutable-cache --check-cache

    - name: Build project
      shell: bash
      run: |
        yarn add -DE @vercel/ncc
        echo "Compiling plugin..."
        yarn ncc build --minify ${{ inputs.pluginEntry }} -m -o dist
        echo "Compiling plugin types..."
        yarn ncc build ${{ inputs.schemaPath }} -m -o plugin

    - name: Update manifest configuration JSON
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs').promises;
          const path = require('path');

          async function updateManifest() {
            const manifestPath = '${{ inputs.manifestPath }}';
            const pluginPath = path.resolve('${{ github.workspace }}', 'plugin', 'index.js');

            let pluginSettingsSchema;
            try {
              // First, try to load as ESM
              try {
                const pluginModule = await import(`file://${pluginPath}`);
                pluginSettingsSchema = pluginModule.pluginSettingsSchema;

                if (!pluginSettingsSchema) {
                  throw new Error('pluginSettingsSchema not found in the ESM module');
                }
              } catch (esmError) {
                // If ESM import fails, try loading as CJS
                try {
                  const pluginModule = require(pluginPath);
                  pluginSettingsSchema = pluginModule.pluginSettingsSchema;

                  if (!pluginSettingsSchema) {
                    throw new Error('pluginSettingsSchema not found in the CJS module');
                  }
                } catch (cjsError) {
                  console.error('Error loading module as ESM and CJS:', esmError, cjsError);
                  process.exit(1);
                }
              }
            } catch (error) {
              console.error('Error loading module:', error);
              process.exit(1);
            }

            const manifest = JSON.parse(await fs.readFile(manifestPath, 'utf8'));
            manifest["configuration"] = pluginSettingsSchema;

            function customReviver(key, value) {
              if (typeof value === "object" && value !== null) {
                if ("properties" in value && "required" in value) {
                  const requiredFields = new Set(value.required);
                  for (const [propKey, propValue] of Object.entries(value.properties)) {
                    if (typeof propValue === 'object' && 'default' in propValue) {
                      requiredFields.delete(propKey);
                    }
                  }
                  value.required = Array.from(requiredFields);
                  if (value.required.length === 0) {
                    delete value.required;
                  }
                }

                // Recursively apply to nested objects and arrays
                if (Array.isArray(value)) {
                  return value.map(item => JSON.parse(JSON.stringify(item), customReviver));
                } else {
                  return Object.fromEntries(
                    Object.entries(value).map(([k, v]) => [k, JSON.parse(JSON.stringify(v), customReviver)])
                  );
                }
              }
              return value;
            }

            const updatedManifest = JSON.stringify(manifest, customReviver, 2);
            await fs.writeFile(manifestPath, updatedManifest, 'utf8');
          }

    - name: Format manifest using Prettier
      shell: bash
      run: |
        yarn add -DE prettier
        yarn prettier --write .

    - name: Get GitHub App token
      if: env.APP_ID != '' && env.APP_PRIVATE_KEY != ''
      uses: tibdex/github-app-token@v1.7.0
      id: get_installation_token
      with:
        app_id: ${{ env.APP_ID }}
        private_key: ${{ env.APP_PRIVATE_KEY }}

    - name: Install dependencies
      shell: bash
      run: |
        yarn add "@actions/core" "@actions/github"

    - name: Conditionally update manifest.json and dist folder
      shell: bash
      env:
        GITHUB_TOKEN: ${{ steps.get_installation_token.outputs.token || github.token }}
      run: |
        git add "${{ inputs.manifestPath }}"
        git add -f ${{ github.workspace }}/dist/\*
        if [ -n "$(git diff-index --cached --name-only HEAD)" ]; then
          node -e "
            const fs = require('fs');
            const path = require('path');
            const github = require('@actions/github');
            const manifestPath = path.relative('.', '${{ inputs.manifestPath }}');

            async function pushChanges() {
              const octokit = github.getOctokit(process.env.GITHUB_TOKEN);

              const context = github.context;
              const owner = context.repo.owner;
              const repo = context.repo.repo;
              const ref = 'heads/${{ github.ref_name }}';

              try {
                const currentCommit = await octokit.rest.git.getRef({
                  owner,
                  repo,
                  ref
                });

                const newTree = await octokit.rest.git.createTree({
                  owner,
                  repo,
                  base_tree: currentCommit.data.object.sha,
                  tree: [
                      {
                        path: manifestPath,
                        mode: '100644',
                        type: 'blob',
                        content: fs.readFileSync(manifestPath, 'utf8'),
                      },
                      ...fs.readdirSync('${{ github.workspace }}/dist').map((file) => ({
                        path: file,
                        mode: '100644',
                        type: 'blob',
                        content: fs.readFileSync('${{ github.workspace }}/' + file, 'utf-8'),
                    })),
                  ],
                });

                const newCommit = await octokit.git.createCommit({
                  owner,
                  repo,
                  message: '${{ inputs.commitMessage }}',
                  tree: newTree.data.sha,
                  parents: [currentCommit.data.object.sha]
                });

                await octokit.git.updateRef({
                  owner,
                  repo,
                  ref,
                  sha: newCommit.data.sha,
                  force: true
                });

                console.log('Changes pushed successfully');
              } catch (error) {
                console.error('Error pushing changes:', error);
                process.exit(1);
              }
            }

            pushChanges();
          "
        else
          echo "No changes to commit"
        fi
